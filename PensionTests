import unittest
from CodigoPension import CalculadoraPensional

class TestAhorroPensional(unittest.TestCase):
    #Normales -> 7
    def setUp(self) -> None:
        self.calculadora = CalculadoraPensional()

    def test_ahorro_pensional_empleado_promedio(self):
        resultado = self.calculadora.calculo_ahorro_pensional(edad = 45, salario = 50000, semanas_laboradas = 400, ahorro_pensional = 10000, rentabilidad_fondo = 0.05, tasa_administracion = 0.02)
        resultado_esperado = 1009800
        self.assertAlmostEqual(resultado, resultado_esperado, places = 2)

    def test_ahorro_pensional_empleado_cercano_jubilacion(self):
        resultado = self.calculadora.calculo_ahorro_pensional(edad = 58, salario = 70000, semanas_laboradas = 2080, ahorro_pensional = 150000, rentabilidad_fondo = 0.06, tasa_administracion = 0.02)
        resultado_esperado = 8883000 
        self.assertAlmostEqual(resultado, resultado_esperado, places = 2)

    def test_ahorro_pensional_tasa_administracion_baja(self):
        resultado = self.calculadora.calculo_ahorro_pensional(edad = 55, salario = 60000, semanas_laboradas = 1825, ahorro_pensional = 200000, rentabilidad_fondo = 0.06, tasa_administracion = 0.01)
        resultado_esperado = 6768000
        self.assertAlmostEqual(resultado, resultado_esperado, places = 2)

    def test_ahorro_pensional_rentabilidad_baja(self):
        resultado = self.calculadora.calculo_ahorro_pensional(edad = 45, salario = 50000, semanas_laboradas = 1400, ahorro_pensional = 120000, rentabilidad_fondo = 0.01, tasa_administracion = 0.02)
        resultado_esperado = None
        self.assertAlmostEqual(resultado, resultado_esperado, places = 2)

    def test_ahorro_pensional_empleado_nuevo(self):
        resultado = self.calculadora.calculo_ahorro_pensional(edad = 20, salario = 30000, semanas_laboradas = 30, ahorro_pensional = 5000, rentabilidad_fondo = 0.04, tasa_administracion = 0.02)
        resultado_esperado = None
        self.assertAlmostEqual(resultado, resultado_esperado, places = 2)

    def test_ahorro_pensional_salario_bajo(self):
        resultado = self.calculadora.calculo_ahorro_pensional(edad = 23, salario = 10000, semanas_laboradas = 20, ahorro_pensional = 3000, rentabilidad_fondo = 0.03, tasa_administracion = 0.02)
        resultado_esperado = None
        self.assertAlmostEqual(resultado, resultado_esperado, places = 2)

    def test_ahorro_pensional_rentabilidad_alta(self):
        resultado = self.calculadora.calculo_ahorro_pensional(edad = 37, salario = 40000, semanas_laboradas = 600, ahorro_pensional = 12000, rentabilidad_fondo = 0.10, tasa_administracion = 0.02)
        resultado_esperado = None
        self.assertAlmostEqual(resultado, resultado_esperado, places = 2)

    #Excepcionales -> 7
        
    def test_edad_negativa(self):
        try:
            resultado = self.calculadora.calculo_ahorro_pensional(edad= -5, salario=50000, semanas_laboradas=400, ahorro_pensional=10000, rentabilidad_fondo=0.05, tasa_administracion=0.02)
        except ValueError as e:
            print(f"Excepción capturada: {e}")
        else:
            self.fail("Se esperaba una excepción ValueError pero no se lanzó.")

    def test_semanas_laboradas_negativas(self):
        try:
            resultado = self.calculadora.calculo_ahorro_pensional(edad = 30, salario = 40000, semanas_laboradas = -20, ahorro_pensional = 20000, rentabilidad_fondo = 0.04, tasa_administracion = 0.02)         
        except ValueError as e:
            print(f"Excepción capturada: {e}")
        else:
            self.fail("Se esperaba una excepción ValueError pero no se lanzó.")

    def test_salario_negativo(self):
        try:
            resultado = self.calculadora.calculo_ahorro_pensional(edad = 45, salario = -50000, semanas_laboradas = 170, ahorro_pensional = 30000, rentabilidad_fondo = 0.06, tasa_administracion = 0.02 )
        except ValueError as e:
            (f"Excepcion capturada: {e}")
        else:
            self.fail("Se esperaba una excepcion ValueError pero no se lanzó.")

    def hola4(self):
        pass

    def hola5(self):
        pass

    def hola6(self):
        pass

    #Errores -> 6

    def test_semanas_laboradas_tipo_incorrecto(self):
        try:
            resultado = self.calculadora.calculo_ahorro_pensional(edad=45, salario=30000, semanas_laboradas="10", ahorro_pensional=10000, rentabilidad_fondo=0.03, tasa_administracion=0.02)
        except TypeError as a:
            print(f"Excepción capturada: {a}")    
        else:
            self.fail("Se esperaba una excepción TypeError pero no se lanzó.")
        
    def test_salario_tipo_incorrecto(self):
        try:
            resultado = self.calculadora.calculo_ahorro_pensional(edad = 40, salario = "40000", semanas_laboradas = 90, ahorro_pensional = 6000, rentabilidad_fondo = 0.04, tasa_administracion = 0.02 )
        except TypeError as a:
            print(f"Excepcion capturada: {a}")
        else:
            self.fail("Se esperaba una excepcion TypeError pero no se lanzó. ")

    def test_rentabilidad_fondo_invalida(self):
        try:
            resultado = self.calculadora.calculo_ahorro_pensional(edad = 33, salario = 30000, semanas_laboradas = 69, ahorro_pensional = 12000, rentabilidad_fondo = 1.2, tasa_administracion = 0.02)    
        except ValueError as a:
            print(f"Excepcion capturada: {a}")
        else:
            self.fail("Se esperaba una excepcion ValueError pero no se lanzó.")    

    def test_edad_tipo_incorrecto(self):
        try:
            resultado = self.calculadora.calculo_ahorro_pensional(edad = "38", salario = 50000, semanas_laboradas = 90, ahorro_pensional = 15000, rentabilidad_fondo = 0.5, tasa_administracion = 0.02)    
        except TypeError as a:
            print(f"Excepcion capturada: {a}")
        else: 
            self.fail("Se esperaba una excepcion TypeError pero no se lanzó.")            

    def test_ahorro_pensional_tipo_incorrecto(self):
        try:
            resultado = self.calculadora.calculo_ahorro_pensional(edad = 38, salario = 50000, semanas_laboradas = 90, ahorro_pensional = "15000", rentabilidad_fondo = 0.5, tasa_administracion = 0.02)    
        except TypeError as a:
            print(f"Excepcion capturada: {a}")
        else:
            self.fail("Se esperaba una excepcion TypeError pero no se lanzó")    
    
    def hola2(self):
        pass

    def hola3(self):
        pass

if __name__ == '__main__':
        unittest.main()
